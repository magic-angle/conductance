#!/usr/bin/env conductance

var { SystemRoutes,
      ExecutableDirectory,
      Filter,
    } = require('mho:server/route');
var { Port, Route } = require('mho:server');
var url = require('sjs:url');
var logging = require('sjs:logging');
var helper = require('./helper');
var path = require('nodejs:path');
var { map, hasElem, at } = require('sjs:sequence');
var root = url.normalize('../', module.id) .. url.toPath;
process.chdir(root);

//----------------------------------------------------------------------
// Array of ports that conductance will listen on:

var apiRegistry = require('mho:server/api-registry');
var port = require('./conf/server.js').port;
var karmaConfUrl = url.normalize('./conf/karma.js', module.id);
var karmaConf = require(karmaConfUrl);

var serverConfig = {
  address: Port(port),
  routes: [
    /* So that .api modules can:
     *  - shutdown the current bridge transport
     *  - send HTTP errors for the current polling request
     *
     * We override the default bridge routes, and inject
     * the relevant objects into each loaded API.
     */
    (function() {
      var currentAPI;
      return Route(
        /^__aat_bridge\/(2)$/,
        require('mho:rpc/aat-server').createTransportHandler(
          function(transport) {
            require('mho:rpc/bridge').accept(
              function(apiid) {
                currentAPI = apiRegistry.getAPIbyAPIID(apiid);
                //logging.warn("got API ", currentAPI, "for ID ", apiid);
                currentAPI._transport = transport;
                return currentAPI;
              },
              transport);
          }
        )
      ) .. Filter(function(req, block) {
        var cmd = req.url.params()['cmd'];
        if (!currentAPI || cmd.indexOf("poll_") != 0) return block();
        currentAPI._poll_request = req;
        try {
          block();
        } finally {
          currentAPI._poll_request = null;
        }
      });
    })(),
    SystemRoutes(),
    ExecutableDirectory(/(?=hello.api$)/, './test'),
    ExecutableDirectory('.'),
  ] .. Filter(function(req, block) {
      var origin = req.request.headers.origin;
      if (origin) {
        var allowedHosts = [
          'localhost',
          '127.0.0.1',
          require('nodejs:os').hostname() + '.local',
        ] .. map(base -> "http://#{base}:#{karmaConf.port}");
        logging.verbose("checking for origin #{origin} in #{allowedHosts.join(",")}");
        if (allowedHosts .. hasElem(origin)) {
          req.response.setHeader("Access-Control-Allow-Origin", origin);
        }
      }
      block();
  })
};

exports.run = exports.serve = function(args) {
  require('mho:server').run(serverConfig);
}

if (require.main === module) {
  var args = require('sjs:sys').argv();
  if (args[0] === '--karma') {
    args.shift();
    var runKarma = -> require('nodejs:karma-sjs-adapter/karma.sjs').run(args);
    if(args[0] === 'run') {
      args.splice(1, 0, '--', karmaConf.testScript);
      runKarma();
    } else if(args[0] === 'start' || args[0] == 'single-run') {
      args.splice(1,0, karmaConfUrl .. url.toPath);
      if (args[0] == 'single-run') {
        args[0] = 'start';
        args.splice(2, 0, '--single-run', '--', karmaConf.testScript);
      }
      helper.serve(serverConfig) {||
        runKarma();
        // XXX karma is fire-and-forget, we can't wait for its completion
        hold();
      }
    } else {
      throw new Error("unknown karma command: #{args[0]}");
    }
    return;
  } else if (args[0] === '--serve') {
    return exports.serve();
  } else {
    // serve while running tests
    var cutil = require('sjs:cutil');
    var string = require('sjs:string');
    var func = require('sjs:function');

    // integration tests expect a server to be running
    var serverRunning = false, cleanup = -> null;
    var startServer = function() {
      serverRunning = true;
      var ctx = cutil.breaking(brk -> helper.serve(serverConfig, brk));
      cleanup = ctx.resume;
    };

    var init = function(runner) {
      // inherit from runner.reporter, and amend its reporting
      // functions with hooks to start/stop server as necessary
      var reporter = runner.reporter = Object.create(runner.reporter);
      reporter.contextBegin = func.seq(reporter.contextBegin, function(ctx) {
        if (!serverRunning && ctx.module() .. string.startsWith('integration/')) {
          startServer();
        }
      });
      reporter.suiteEnd = func.seq(-> cleanup(), reporter.suiteEnd);
    }

    require('./run.html').run({
      init: init,
    });
  }
}
