#!/usr/bin/env conductance

var { SystemRoutes,
      ExecutableDirectory,
      CodeDirectory,
      Filter,
      ETagFilter,
    } = require('mho:server/route');
var { Port, Route } = require('mho:server');
var { setStatus } = require('mho:server/response');
var url = require('sjs:url');
var childProcess = require('sjs:nodejs/child-process');
var logging = require('sjs:logging');
var helper = require('./helper');
var path = require('nodejs:path');
var { map, hasElem, at, concat, toArray } = require('sjs:sequence');
var root = url.normalize('../', module.id) .. url.toPath;
process.chdir(root);

//----------------------------------------------------------------------
// Array of ports that conductance will listen on:

var apiRegistry = require('mho:server/api-registry');
var port = require('./conf/server.js').port;
var karmaConfUrl = url.normalize('./conf/karma.js', module.id);
var karmaConf = require(karmaConfUrl);
var importTime = Date.now();

var serverConfig = {
  address: Port(port),
  routes: [
    /* So that .api modules can:
     *  - shutdown the current bridge transport
     *  - send HTTP errors for the current polling request
     *
     * We override the default bridge routes, and inject
     * the relevant objects into each loaded API.
     */
    (function() {
      var currentApiModule;
      return Route(
        /^__aat_bridge\/(2)$/,
        require('mho:rpc/aat-server').createTransportHandler(
          function(transport) {
            require('mho:rpc/bridge').accept(
              function(apiid) {
                var api = apiRegistry.getAPIbyAPIID(apiid);
                var moduleId = api.id;
                if(moduleId) {
                  currentApiModule = require.modules[moduleId].exports;
                  //logging.warn("got API ", currentApiModule, "for ID ", apiid);
                  currentApiModule._transport = transport;
                } else {
                  currentApiModule = null;
                }
                return api;
              },
              transport);
          }
        )
      ) .. Filter(function(req, block) {
        var cmd = req.url.params()['cmd'];
        if (!currentApiModule || cmd.indexOf("poll_") != 0) return block();
        currentApiModule._poll_request = req;
        try {
          block();
        } finally {
          if(currentApiModule) currentApiModule._poll_request = null;
        }
      });
    })(),
    SystemRoutes(),

    Route('etagRoute', {'GET':
      function(req) {
        req .. setStatus(200);
        req.response.end("ok: #{req.url.params()["etag"]}");
      }
    }) .. ETagFilter(function(params) {
      return "#{importTime}-#{params["etag"]}";
    }),

    ExecutableDirectory(/(?=hello.api$)/, './test'),
    CodeDirectory('test_as_code', './test'),
    ExecutableDirectory('.'),
  ] .. Filter(function(req, block) {
      var origin = req.request.headers.origin;
      if (origin) {
        var allowedHosts = [
          'localhost',
          '127.0.0.1',
          require('nodejs:os').hostname() + '.local',
        ] .. map(base -> "http://#{base}:#{karmaConf.port}");
        logging.verbose("checking for origin #{origin} in #{allowedHosts.join(",")}");
        if (allowedHosts .. hasElem(origin)) {
          req.response.setHeader("Access-Control-Allow-Origin", origin);
        }
      }
      block();
  })
};

exports.run = exports.serve = function(args) {
  require('mho:server').run(serverConfig);
}

if (require.main === module) {
  var TRAVIS = process.env.TRAVIS === 'true';
  if(TRAVIS) {
    // make sure there are no uncommitted changes
    childProcess.run('npm', ['run-script', 'build'], {'stdio':'inherit'});
    childProcess.run(process.execPath, [require('sjs:sys').executable, 'sjs:../tools/vcs-changes.sjs'], {'stdio':'inherit'});
  }
  var args = require('sjs:sys').argv();
  if (args[0] === '--karma') {
    args.shift();
    var action = args[0];
    args.shift();

    var karmaArgs = [karmaConfUrl .. url.toPath];
    var browsers = process.env.BROWSERS;
    if (browsers) {
      if (TRAVIS && browsers != 'PhantomJS') {
        process.env['DISPLAY'] = ':99';
        childProcess.run("sh", ["-e", "/etc/init.d/xvfb", "start"], {stdio: "inherit"});
        hold(3000);
      }
      karmaArgs = karmaArgs.concat(['--browsers',process.env.BROWSERS]);
    }

    var runKarma = -> console.log([
        [action],
        karmaArgs,
        ['--', karmaConf.testScript],
        args,
      ] .. concat .. toArray);
    var runKarma = -> require('nodejs:karma-sjs-adapter/karma.sjs').run([
        [action],
        karmaArgs,
        ['--', karmaConf.testScript],
        args,
      ] .. concat .. toArray);

    if(action === 'run') {
      runKarma();
    } else if(action === 'start' || action == 'single-run') {
      if (action == 'single-run') {
        action = 'start';
        karmaArgs.push('--single-run');
      }
      helper.serve(serverConfig) {||
        runKarma();
        // XXX karma is fire-and-forget, we can't wait for its completion
        hold();
      }
    } else {
      throw new Error("unknown karma command: #{action}");
    }
    return;
  } else if (args[0] === '--serve') {
    return exports.serve();
  } else {
    // serve while running tests
    var cutil = require('sjs:cutil');
    var string = require('sjs:string');
    var func = require('sjs:function');

    // integration tests expect a server to be running
    var serverRunning = false, cleanup = -> null;
    var startServer = function() {
      serverRunning = true;
      var ctx = cutil.breaking(brk -> helper.serve(serverConfig, brk));
      cleanup = ctx.resume;
    };

    var init = function(runner) {
      // inherit from runner.reporter, and amend its reporting
      // functions with hooks to start/stop server as necessary
      var reporter = runner.reporter = Object.create(runner.reporter);
      reporter.contextBegin = func.seq(reporter.contextBegin, function(ctx) {
        if (!serverRunning && ctx.module() .. string.startsWith('integration/')) {
          startServer();
        }
      });
      reporter.suiteEnd = func.seq(-> cleanup(), reporter.suiteEnd);
    }

    require('./run.html').run({
      init: init,
    });
  }
}
