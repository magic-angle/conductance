var { ownValues, get } = require('sjs:object');
var { at } = require('sjs:sequence');
var logging = require('sjs:logging');
var {collapseHtmlFragment} = require('mho:surface/base');
var {Element, CSS, Document} = require('mho:surface');

var templates = {
	script:      v -> Element("script", "window.injected = #{v};", {"id":"content"}),
	scriptQuasi: v -> Element("script", `window.injected = ${v};`, {"id":"content"}),
	div:         v -> `<div id="content">$v</div>`,
	pre:         v -> `<pre id="content">$v</pre>`,
	attr_obj:    v -> Element("div", null, {"id":"content", "data-payload":v}),
	attr_double: v -> `<div id="content" data-payload="$v"></div>`,
	attr_single: v -> `<div id="content" data-payload='$v'></div>`,
};

exports.content = function(pars) {
	var name = pars .. get('template');
	var value = pars .. get('value');
	var result;
	switch(name) {
		case 'style':
			result = Document(Element("div", "styled", {"id":"content"}) .. CSS(value));
			break;
		default:
			var tmpl = templates .. get(name);
			result = collapseHtmlFragment(tmpl(value)).getHtml();
			break;
	}
	return result;
}
