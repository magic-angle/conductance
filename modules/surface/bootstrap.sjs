// DON'T EDIT THIS FILE; IT IS GENERATED BY
// conductance/gup/modules/surface/bootstrap.gup

/* (c) 2013-2014 Oni Labs, http://onilabs.com
 *
 * This file is part of Conductance, http://conductance.io/
 *
 * It is subject to the license terms in the LICENSE file
 * found in the top-level directory of this distribution.
 * No part of Conductance, including this file, may be
 * copied, modified, propagated, or distributed except
 * according to the terms contained in the LICENSE file.
 */



module.exports = require(['./bootstrap/html', './bootstrap/components']);

/**

@require ./bootstrap/html
@require ./bootstrap/components

@summary Bootstrap UI building blocks  
@desc
  This modue defines building blocks for documents that make use of the 
  [Twitter Bootstrap](http://getbootstrap.com) CSS library built into Conductance.

  It exposes all of the symbols that are defined in the [surface/html::]
  module, but overrides styles where appropriate (e.g. the
  [::Button] element exposed by this module has the Bootstrap style
  classes `btn` and `btn-default` defined, whereas the
  version in [surface/html::] does not). Only those symbols that have such
  custom styles are explicitly documented here. For the full list of symbols
  see the [surface/html::] module.

  In addition to the basic HTML constructs, this module also defines
  Bootstrap-specific building blocks, such as [::Btn].

  When writing a Conductance client-side app
  ([mho:#features/app-file::]), you typically don't import this
  module yourself: Boostrap-enabled templates (such as
  [mho:surface/doc-template/app-default::]; see
  [mho:surface/doc-template/::] for a complete list) will expose all
  of the symbols in this module automatically in a dynamically
  generated [mho:app::] module.

@function Button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled button (`<button class="btn btn-default">`)
@return {surface::Element}
@desc
  * See also [::Btn] for creating buttons with more style choices.
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);

  @mainContent .. @appendContent([
    @demo.CodeResult("\
  @Button('Click me')",
      @Button('Click me')
    )]);

  

@function Table
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled table (`<table class="table">`)
@return {surface::Element}

@function Input
@summary Bootstrap-styled input (`<input class="form-control">`)
@param  {String} [type]
@param  {String|sjs:sequence::Stream|sjs:observable::ObservableVar} [value] 
@param  {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  When the element is inserted into the document, its value 
  will be set to `value`. If `value` is a [sjs:sequence::Stream], the
  element's value will be updated every time `value` changes. If (in addition)
  `value` is an [sjs:observable::ObservableVar], then `value` will
  be updated to reflect any manual changes to the element's value.

@function TextInput
@summary Bootstrap-styled [surface/html::TextInput] (with class "form-control")
@param  {String|sjs:sequence::Stream|sjs:observable::ObservableVar} [value]
@param  {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  When the element is inserted into the document, its value
  will be set to `value`. If `value` is a [sjs:sequence::Stream], the
  element's value will be updated every time `value` changes. If (in addition)
  `value` is an [sjs:observable::ObservableVar], then `value` will
  be updated to reflect any manual changes to the element's value.

@function TextArea
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled textarea (`<textarea class="form-control">`)
@return {surface::Element}

@function Select
@param {Object} [settings]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled [surface/html::Select] (with class "form-control")
@return {surface::Element}

@function TextRight
@altsyntax element .. TextRight 
@summary Decorator that causes text in the given block element to be right aligned
@param {surface::HtmlFragment} [element] block element (e.g. `Div`, `P`, `H1`)
@return {::Element}
@desc
  Returns a copy of `element` with bootstrap's "text-right" class added to the 
  element's class list (see http://getbootstrap.com/css/#type-alignment).

  If `TextRight` is applied to a [::HtmlFragment] that is not of class [::Element],
  `element` will automatically be wrapped using [surface::ensureElement].

  `TextRight` is ineffective if `element` is an inline element (`Span`, etc).
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  @mainContent .. @appendContent([
    @demo.CodeResult(
      "@Div('This is left aligned')",
      @Div('This is left aligned')),
    @demo.CodeResult(
      "@Div('This is right aligned') .. @TextRight",
      @Div('This is right aligned') .. @TextRight)
      ]);
  

@function TextCenter
@altsyntax element .. TextCenter 
@summary Decorator that causes text in the given block element to be horizontally centered
@param {surface::HtmlFragment} [element] block element (e.g. `Div`, `P`, `H1`)
@return {::Element}
@desc
  Returns a copy of `element` with bootstrap's "text-center" class added to the 
  element's class list (see http://getbootstrap.com/css/#type-alignment).

  If `TextCenter` is applied to a [::HtmlFragment] that is not of class [::Element],
  `element` will automatically be wrapped using [surface::ensureElement].

  `TextCenter` is ineffective if `element` is an inline element (`Span`, etc).
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  @mainContent .. @appendContent([
    @demo.CodeResult(
      "@Div('This is left aligned')",
      @Div('This is left aligned')),
    @demo.CodeResult(
      "@Div('This is center aligned') .. @TextCenter",
      @Div('This is center aligned') .. @TextCenter)
      ]);
  

@function TextJustify
@altsyntax element .. TextJustify 
@summary Decorator that causes text in the given block element to be justified
@param {surface::HtmlFragment} [element] block element (e.g. `Div`, `P`, `H1`)
@return {::Element}
@desc
  Returns a copy of `element` with bootstrap's "text-justify" class added to the 
  element's class list (see http://getbootstrap.com/css/#type-alignment).

  If `TextJustify` is applied to a [::HtmlFragment] that is not of class [::Element],
  `element` will automatically be wrapped using [surface::ensureElement].

  `TextJustify` is ineffective if `element` is an inline element (`Span`, etc).
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);

  var content = @cycle(['The quick brown fox jumps over the lazy dog. ']) .. @take(10) .. @toArray;

  @mainContent .. @appendContent([
    @demo.CodeResult(
      "@Div('The quick brown fox ...')",
      @Div(content)),
    @demo.CodeResult(
      "@Div('The quick brown fox ...') .. @TextJustify",
      @Div(content) .. @TextJustify)
      ]);
  

@function Btn
@summary Bootstrap-style button ("class='btn'") with additional `btn-*` classes applied.
@param {String} [btn_classes] String of `btn-*` classes to apply to the button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  `btn_classes` is a space-separated list of `btn-*` classes that should be applied to the 
  button:
  
  * **style**: `default`, `primary`, `success`, `info`, `warning`, `danger`, or `link`
  * **sizing**: `lg`, `sm`, or `xs` (or none)
  * **block-level**: `block` (or none)

  See also http://getbootstrap.com/css/#buttons


@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  var btn_styles = ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link'];
  var btn_sizes  = ['lg', '', 'sm', 'xs' ];
  @mainContent .. @appendContent([
    btn_styles .. 
      @unpack(cls -> btn_sizes .. @transform(size -> "#{cls} #{size}")) ..
      @transform(cls -> @Btn(cls, "@Btn('#{cls}',CONTENT)") .. @Style("margin:10px;")) ..
      @toArray,
    @Hr(),
    @Btn('block primary', "@Btn('block primary', CONTENT)"),
    @Hr(),
    
    @demo.CodeResult(
      "@Btn('primary',\n      `$@Icon('cloud-download') Download`)",
      @Btn('primary',`$@Icon('cloud-download') Download`))
  ]);

@variable AvailableIcons
@summary Array of names accepted by [::Icon]

@function Icon
@param {String} [name] Name of icon, see [::AvailableIcons]
@summary Scalable Bootstrap Glyphicon  (`<span class="glyphicon glyphicon-{name}">`)
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}

@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  var ColStyle = @CSS(`{padding-bottom:8px;}`); 
  @mainContent .. @appendContent([@Row(
    @AvailableIcons .. @map(name ->
      @Col('md-3 sm-4 xs-6', [@Icon(name), `&nbsp;&nbsp;@Icon('${@Strong(name)}')`]) .. 
      ColStyle
    )
  ),
  @Hr(),
  @demo.CodeResult(
    "@Icon('heart') .. @Style('color:red;font-size:80px;')",
    @Icon('heart') .. @Style('color:red;font-size: 80px'))
  ]);

@function Row
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary A row container in a Bootstrap grid (`<div class="row">`)
@return {surface::Element}

@function Col
@summary A column container in a Bootstrap grid (`<div class="col_classes">`)
@param {String} [col_classes] String of `col-*` classes to apply to the col
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  `col_classes` is a space-separated list of `col-*` classes that 
  should be applied to the col (`N` designates an integer between 1-12, `M` an integer between 0-11):

  * **width**: one or more of `xs-N`, `sm-N`, `md-N`, `lg-N`.
  * **offset**: one or more of `xs-offset-M`, `sm-offset-M`, `md-offset-M`, `lg-offset-M`.
  * **pulling left**: one or more of `xs-pull-M`, `sm-pull-M`, `md-pull-M`, `lg-pull-M`.
  * **pushing right**: one or more of `xs-push-M`, `sm-push-M`, `md-push-M`, `lg-push-M`.

@function Container
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary A bootstrap container (`<div class="container">`)
@return {surface::Element}
@desc
  [::Container] centers its content and scales it in discrete steps 
  according to screen width.

  ### Notes

  * See also http://getbootstrap.com/css/#overview-container.
  
  * Bootstrap requires a containing element to wrap site contents
  and house the grid system. You can choose between [::Container]
  or [::FluidContainer].

  * Containers are not nestable.

  * *.app file ([mho:#features/app-file::]) with Bootstrap-enabled doc-templates 
  ([mho:surface/doc-template/::]) will typically already have a Container element. 
  E.g. the [mho:surface/doc-template/app-default::] template's 
  [mho:surface/doc-template/app-default::mainContent] element will be a [::Container]
  by default, or a [::FluidContainer] if the 
  [mho:surface/doc-template/app-default::@template-fluid] directive is set to `true`.
  
  

@function FluidContainer
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary A fluid bootstrap container (`<div class="container-fluid">`)
@return {surface::Element}
@desc
  [::FluidContainer] lays out its content full-width and fluid.

  See the notes for [::Container]

@function Lead
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Lead body paragraph (`<p class='lead'>`)
@return {surface::Element}
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  @mainContent .. @appendContent([
    @demo.CodeResult(
    "\
  [
   @Lead('This is a lead paragraph.'),
   @P('This is a normal paragraph.')
  ]",
    [@Lead('This is a lead paragraph.'),
     @P('This is a normal paragraph.')]
    )
  ])


@function Lbl
@summary Bootstrap label (`<span class='label'>`) 
@param {optional String} [variant='default'] `label-*` class to apply to the label
@param {surface::HtmlFragment} [content]
@return {surface::Element}
@desc
  See also http://getbootstrap.com/components/#labels.

  `variant` is an optional `label-*` class to apply to the label:
  
  * **style**: `default`, `primary`, `success`, `info`, `warning`, or `danger`

@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);
  @mainContent .. @appendContent([
    @demo.CodeResult(
      "`$@Lbl('Default')
   $@Lbl('primary', 'Primary')
   $@Lbl('success', 'Success')
   $@Lbl('info', 'Info')
   $@Lbl('warning', 'Warning')
   $@Lbl('danger', 'Danger')`",
      `$@Lbl('Default')
       $@Lbl('primary', 'Primary')
       $@Lbl('success', 'Success')
       $@Lbl('info', 'Info')
       $@Lbl('warning', 'Warning')
       $@Lbl('danger', 'Danger')
      `
    ),
    @demo.CodeResult(
      "@H3(['Example heading ', @Lbl('New')])",
      @H3(['Example heading ', @Lbl('New')])
    )
  ]);

@function Badge
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary 'Badge' typically used for highlighting new or unread items (`<span class='badge'>`) 
@return {surface::Element}
@desc
  * See http://getbootstrap.com/components/#badges
  * Collapses when `content` is empty
  * Style adapts automatically to 'active' state in [::Pill]s
  * Automatically pulled right in [::ListGroupItem]s
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);

  var Items = @generate(Math.random) .. 
    @transform(x -> (hold(1000), Math.round(x*100)));

  @mainContent .. @appendContent([
    @demo.CodeResult("\
  @A(`Inbox $@Badge(42)`)",
      @A(`Inbox $@Badge(42)`)
    ),
    @demo.CodeResult("\
  var Items = @ObservableVar(0);
  ...  
  @A(`Inbox $@Badge(Items)`)",
      @A(`Inbox $@Badge(Items)`)
    )
  ])


@function Jumbotron
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary A component for showcasing key content (`<div class='jumbotron'>`)
@return {surface::Element}
@desc
  * See http://getbootstrap.com/components/#jumbotron
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);

  @mainContent .. @appendContent([
    @demo.CodeResult("\
  @Jumbotron([
    @H1('Hello, world!'),
    @P(...),
    @P(@Btn('primary lg', 'Learn more'))
  ])",
      @Jumbotron([
        @H1('Hello, world!'),
        @P('This is a simple hero unit, a simple jumbotron-style
            component for calling extra attention to featured content or
            information.'),
        @P(@Btn('primary lg', 'Learn more'))
      ])
    )]);


@function ListGroup
@param {Array} [items] Array of [surface::HtmlFragment]s
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap list group (`<div class='list-group'><div class='list-group-item'>...</div>...</div>`)
@return {surface::Element}

@function ListGroupItem
@summary XXX document me

@function PageHeader
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary <div class="page-header"><h1>{content}</h1></div>
@return {surface::Element}

@function Panel
@summary Bootstrap-style panel ("<div class='panel'>") with additional `panel-*` classes applied.
@param {String} [panel_classes] String of `panel-*` classes to apply to the button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  `panel_classes` is a space-separated list of `panel-*` classes that should be applied to the 
  panel:
  
  * **context**: `default`, `primary`, `success`, `info`, `warning`, or `danger`

@function PanelBody
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary <div class="panel-body">
@return {surface::Element}

@function PanelHeading
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary <div class="panel-heading">
@return {surface::Element}

@function PanelTitle
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary <h3 class='panel-title'>
@return {surface::Element}

@function doModal
@altsyntax doModal(body, [settings], block)
@altsyntax doModal([settings]) { |dialog| ... }
@param {Object} [settings] 
@param {Function} [block] Function bounding lifetime of dialog; will be called with DOM node of dialog as first argument.
@return {Object} `undefined` if the dialog is dismissed with the close button, by clicking on the backdrop or typing 'Escape', otherwise equal to the return value of `block`
@setting {surface::HtmlFragment} [body]
@setting {optional surface::HtmlFragment} [header] Content of header. Takes precedence over `title` if both are given.
@setting {optional surface::HtmlFragment} [title] Title to display in a `<h4 class='modal-title'>` in the header.
@setting {optional Boolean} [close_button=true] Show a close button in the header. Only takes effect if `header` or `title` is given.
@setting {optional surface::HtmlFragment} [footer]
@setting {optional Boolean|String} [backdrop=true] Include a modal-backdrop element. Specify `'static'` for a backdrop that doesn't close the modal on click.
@setting {optional Boolean} [keyboard=true] Close the modal when Escape key is pressed.
@summary Execute function `block` while showing a modal dialogbox
@desc
  * "Close events", such as a click on the `close_button`, or a press of the Escape key, will abort `block`, and can be handled inside `block` with a [sjs:#language/syntax::try-retract] construct.
@hostenv xbrowser
@demo
  @ = require(['mho:std', 'mho:app', {id:'./demo-util', name:'demo'}]);

  function launch() {
    var Countdown = @ObservableVar(10);
    var Status = @ObservableVar(`Ignition in $Countdown seconds`);
    @doModal({
      title: `Rocket Launch`,
      body: Status .. @H2() .. @TextCenter,
      footer: @Btn('primary', 'Abort') .. @Enabled(Countdown) .. @OnClick({|| return})
    }) {
      || 
      for (var i=9; i>=0; --i) {
        hold(1000);
        Countdown.set(i);
      }
      Status.set('Engines started');
      hold(1000);
      Status.set('Rocket launched');
      hold();
    }
  }

  @mainContent .. @appendContent([
    @demo.CodeResult(
      "\
    @ = require(['mho:std', 'mho:app']);

    function launch() {
      var Countdown = @ObservableVar(10);
      var Status = @ObservableVar(`Ignition in $Countdown seconds`);

      @doModal({
        title: `Rocket Launch`,
        body: Status .. @H2() .. @TextCenter,
        footer: @Btn('primary', 'Abort') .. 
                  @Enabled(Countdown) .. 
                  @OnClick({|| return})
      }) {
        || 
        for (var i=9; i>=0; --i) {
          hold(1000);
          Countdown.set(i);
        }
        Status.set('Engines started');
        hold(1000);
        Status.set('Rocket launched');
        hold();
      }
    }
    
    @mainContent .. @appendContent(
      @Btn('primary', 'Launch Rocket') .. @OnClick(launch)
    );\

    ",
      [@Btn('primary', 'Launch Rocket') .. @OnClick(launch),
       @Div() .. @Style('height:300px')]
    )
  ]);


*/
