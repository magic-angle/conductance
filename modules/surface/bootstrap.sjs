// DON'T EDIT THIS FILE; IT IS GENERATED BY
// conductance/gup/modules/surface/bootstrap.gup

/* (c) 2013-2014 Oni Labs, http://onilabs.com
 *
 * This file is part of Conductance, http://conductance.io/
 *
 * It is subject to the license terms in the LICENSE file
 * found in the top-level directory of this distribution.
 * No part of Conductance, including this file, may be
 * copied, modified, propagated, or distributed except
 * according to the terms contained in the LICENSE file.
 */



module.exports = require(['./bootstrap/html', './bootstrap/components']);

/**

@require ./bootstrap/html
@require ./bootstrap/components

@summary Bootstrap UI building blocks  
@desc
  This modue defines building blocks for documents that make use of the 
  [Twitter Bootstrap](http://getbootstrap.com) CSS library built into Conductance.

  It exposes all of the symbols that are defined in the [surface/html::]
  module, but overrides styles where appropriate (e.g. the
  [::Button] element exposed by this module has the Bootstrap style
  classes `btn` and `btn-default` defined, whereas the
  version in [surface/html::] does not). Only those symbols that have such
  custom styles are explicitly documented here. For the full list of symbols
  see the [surface/html::] module.

  In addition to the basic HTML constructs, this module also defines
  Bootstrap-specific building blocks, such as [::Btn].

  When writing a Conductance client-side app
  ([mho:#features/app-file::]), you typically don't import this
  module yourself: Boostrap-enabled templates (such as
  [mho:surface/doc-template/app-default::]; see
  [mho:surface/doc-template/::] for a complete list) will expose all
  of the symbols in this module automatically in a dynamically
  generated [mho:app::] module.

@function Button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled button (`<button class="btn btn-default">`)
@return {surface::Element}

@function Table
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled table (`<table class="table">`)
@return {surface::Element}

@function Input
@summary Bootstrap-styled input (`<input class="form-control">`)
@param  {String} [type]
@param  {String|sjs:sequence::Stream|sjs:observable::ObservableVar} [value] 
@param  {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  When the element is inserted into the document, its value 
  will be set to `value`. If `value` is a [sjs:sequence::Stream], the
  element's value will be updated every time `value` changes. If (in addition)
  `value` is an [sjs:observable::ObservableVar], then `value` will
  be updated to reflect any manual changes to the element's value.

@function TextInput
@summary Bootstrap-styled [surface/html::TextInput] (with class "form-control")
@param  {String|sjs:sequence::Stream|sjs:observable::ObservableVar} [value]
@param  {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@return {surface::Element}
@desc
  When the element is inserted into the document, its value
  will be set to `value`. If `value` is a [sjs:sequence::Stream], the
  element's value will be updated every time `value` changes. If (in addition)
  `value` is an [sjs:observable::ObservableVar], then `value` will
  be updated to reflect any manual changes to the element's value.

@function TextArea
@param {surface::HtmlFragment} [content]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled textarea (`<textarea class="form-control">`)
@return {surface::Element}

@function Select
@param {Object} [settings]
@param {optional Object} [attrs] Hash of additional DOM attributes to set on the element
@summary Bootstrap-styled [surface/html::Select] (with class "form-control")
@return {surface::Element}

@function Btn
@summary Bootstrap-style button ("class='btn'") with additional `btn-*` classes applied.
@param {String} [btn_classes] String of `btn-*` classes to apply to the button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@return {surface::Element}
@desc
  `btn_classes` is a space-separated list of `btn-*` classes that should be applied to the 
  button:
  
  * **style**: `default`, `primary`, `success`, `info`, `warning`, `danger`, or `link`
  * **sizing**: `lg`, `sm`, or `xs` (or none)
  * **block-level**: `block` (or none)

@demo
  @ = require(['mho:std', 'mho:app']);
  var btn_styles = ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link'];
  var btn_sizes  = ['lg', '', 'sm', 'xs' ];
  @mainContent .. @appendContent([
    btn_styles .. 
      @unpack(cls -> btn_sizes .. @transform(size -> "#{cls} #{size}")) ..
      @transform(cls -> @Btn(cls, "@Btn('#{cls}',CONTENT)") .. @Style("margin:10px;")) ..
      @toArray,
    @Hr(),
    @Btn('block primary', "@Btn('block primary', CONTENT)"),
    @Hr(),
    @Row([
      @Col('sm-6', @Pre("@Btn('primary',\n      `$@Icon('cloud-download') Download`)")),
      @Col('sm-6', @Btn('primary',`$@Icon('cloud-download') Download`))
    ])
      ]
  );

@variable AvailableIcons
@summary Array of names accepted by [::Icon]

@function Icon
@param {String} [name] Name of icon, see [::AvailableIcons]
@summary Scalable Bootstrap Glyphicon  (`<span class="glyphicon glyphicon-{name}">`)
@param {optional Object} [attribs] Additional attributes to set on the HTML element
@return {surface::Element}

@demo
  @ = require(['mho:std', 'mho:app']);
  var ColStyle = @CSS(`{padding-bottom:8px;}`); 
  @mainContent .. @appendContent([@Row(
    @AvailableIcons .. @map(name ->
      @Col('md-3 sm-4 xs-6', [@Icon(name), `&nbsp;&nbsp;@Icon('${@Strong(name)}')`]) .. 
      ColStyle
    )
  ),
  @Hr(),
  @Row([
    @Col('sm-6', @Pre("@Icon('heart') .. @Style('color:red;font-size:80px;')")),
    @Col('sm-6', @Icon('heart') .. @Style('color:red;font-size: 80px'))
    ])
  ]);

@function Row
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary A row container in a Bootstrap grid (`<div class="row">`)
@return {surface::Element}

@function Col
@summary A column container in a Bootstrap grid (`<div class="col_classes">`)
@param {String} [col_classes] String of `col-*` classes to apply to the col
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@return {surface::Element}
@desc
  `col_classes` is a space-separated list of `col-*` classes that 
  should be applied to the col (`N` designates an integer between 1-12, `M` an integer between 0-11):

  * **width**: one or more of `xs-N`, `sm-N`, `md-N`, `lg-N`.
  * **offset**: one or more of `xs-offset-M`, `sm-offset-M`, `md-offset-M`, `lg-offset-M`.
  * **pulling left**: one or more of `xs-pull-M`, `sm-pull-M`, `md-pull-M`, `lg-pull-M`.
  * **pushing right**: one or more of `xs-push-M`, `sm-push-M`, `md-push-M`, `lg-push-M`.

@function Container
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary A bootstrap container (`<div class="container">`)
@return {surface::Element}
@desc
  [::Container] centers its content and scales it in discrete steps 
  according to screen width.

  ### Notes

  * See also http://getbootstrap.com/css/#overview-container.
  
  * Bootstrap requires a containing element to wrap site contents
  and house the grid system. You can choose between [::Container]
  or [::FluidContainer].

  * Containers are not nestable.

  * *.app file ([mho:#features/app-file::]) with Bootstrap-enabled doc-templates 
  ([mho:surface/doc-template/::]) will typically already have a Container element. 
  E.g. the [mho:surface/doc-template/app-default::] template's 
  [mho:surface/doc-template/app-default::mainContent] element will be a [::Container]
  by default, or a [::FluidContainer] if the 
  [mho:surface/doc-template/app-default::@template-fluid] directive is set to `true`.
  
  

@function FluidContainer
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary A fluid bootstrap container (`<div class="container-fluid">`)
@return {surface::Element}
@desc
  [::FluidContainer] lays out its content full-width and fluid.

  See the notes for [::Container]

@function Lead
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary Lead body paragraph (`<p class='lead'>`)
@return {surface:Element}

@function ListGroup
@param {Array} [items] Array of [surface::HtmlFragment]s
@param {optional Object} [attribs]
@summary Bootstrap list group (`<div class='list-group'><div class='list-group-item'>...</div>...</div>`)
@return {surface::Element}

@function ListGroupItem
@summary XXX document me

@function PageHeader
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary <div class="page-header"><h1>{content}</h1></div>
@return {surface::Element}

@function Panel
@summary Bootstrap-style panel ("<div class='panel'>") with additional `panel-*` classes applied.
@param {String} [panel_classes] String of `panel-*` classes to apply to the button
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@return {surface::Element}
@desc
  `panel_classes` is a space-separated list of `panel-*` classes that should be applied to the 
  panel:
  
  * **context**: `default`, `primary`, `success`, `info`, `warning`, or `danger`

@function PanelBody
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary <div class="panel-body">
@return {surface::Element}

@function PanelHeading
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary <div class="panel-heading">
@return {surface::Element}

@function PanelTitle
@param {surface::HtmlFragment} [content]
@param {optional Object} [attribs]
@summary <h3 class='panel-title'>
@return {surface::Element}

@function doModal
@altsyntax doModal(body, [settings], block)
@altsyntax doModal([settings]) { |dialog| ... }
@param {Object} [settings] 
@param {Function} [block] Function bounding lifetime of dialog; will be called with DOM node of dialog as first argument.
@return {Object} `undefined` if the dialog is dismissed with the close button, by clicking on the backdrop or typing 'Escape', other equal to the return value of `block`
@setting {surface::HtmlFragment} [body]
@setting {optional surface::HtmlFragment} [header] Content of header. Takes precedence over `title` if both are given.
@setting {optional surface::HtmlFragment} [title] Title to display in a `<h4 class='modal-title'>` in the header.
@setting {optional Boolean} [close_button=true] Show a close button in the header. Only takes effect if `header` or `title` is given.
@setting {optional surface::HtmlFragment} [footer]
@setting {optional Boolean|String} [backdrop=true] Include a modal-backdrop element. Specify `'static'` for a backdrop that doesn't close the modal on click.
@setting {optional Boolean} [keyboard=true] Close the modal when Escape key is pressed.
@summary Execute function `block` while showing a modal dialogbox
@hostenv xbrowser

*/
