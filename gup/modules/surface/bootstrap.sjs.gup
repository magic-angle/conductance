#!../../../conductance
// vim: syntax=sjs:
@ = require('sjs:std');
@docutil = require('sjs:docutil');

var [outputFile, _] = @argv();

var modules = ['bootstrap/html.sjs', 'bootstrap/components.sjs'];
@childProcess.run('gup', ['-u'].concat(modules), {stdio:'inherit'});

var unindent = (s) -> s.replace(/^\n+/, '') .. @unindent;

var docComments = modules
  .. @map(f -> @fs.readFile(f, 'utf-8'))
  .. @map(@docutil.extractDocComments)
  .. @concat
  .. @filter(comment -> !
    ( comment .. @contains('@nodoc') ||
      comment .. @contains('@noindex')
    ))
  .. @transform(unindent);

var output = "
/* DON'T EDIT THIS FILE; IT IS GENERATED BY
 * conductance/gup/modules/surface/bootstrap.sjs.gup
 */

module.exports = require(['./bootstrap/html', './bootstrap/components']);

/**

@require ./bootstrap/html
@require ./bootstrap/components

@summary Bootstrap UI building blocks
@desc
  This modue defines building blocks for documents that make use of the
  [Twitter Bootstrap](http://getbootstrap.com) CSS library built into Conductance.

  It exposes all of the symbols that are defined in the [surface/html::]
  module, but overrides styles where appropriate (e.g. the
  [::Button] element exposed by this module has the Bootstrap style
  classes `btn` and `btn-default` defined, whereas the
  version in [surface/html::] does not). Only those symbols that have such
  custom styles are explicitly documented here. For the full list of symbols
  see the [surface/html::] module.

  In addition to the basic HTML constructs, this module also defines
  Bootstrap-specific building blocks, such as [::Btn].

  When writing a Conductance client-side app
  ([mho:#features/app-file::]), you typically don't import this
  module yourself: Boostrap-enabled templates (such as
  [mho:surface/doc-template/app-default::]; see
  [mho:surface/doc-template/::] for a complete list) will expose all
  of the symbols in this module automatically in a dynamically
  generated [mho:app::] module.

#{docComments .. @join("\n")}
*/
";
@fs.writeFile(outputFile, output);

require('../../tmp/copyright-header.gup').addHeader(outputFile);

@childProcess.run('gup', ['--contents', outputFile], {stdio:'inherit'});
