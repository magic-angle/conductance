@ = require('mho:std');
@app  = require('../job/app');
@user = require('../auth/user');
@bridge = require('mho:rpc/bridge');
@etcd = require('../job/etcd');

var etcd = @env.get('etcd');

var validateToken = function() {
  if (@env.get('use-gcd')) {
    // if GCD is in use, we can read the DB from multiple hosts directly.
    var api = require('../master/user.api');
    return api.validateToken;
  } else {
    // proxy to master's API
    return function(token) {
      var master_endpoint = etcd.get(@etcd.master_endpoint) .. @getPath('node.value');
      @bridge.connect(@url.normalize('/master/user.api', master_endpoint), {}) {|conn|
        return conn.api.validateToken(token);
      }
    }
  }
}();

exports.authenticate = function(token) {
  var uid = validateToken(token);
  // wrap remote uid into a local object
  @assert.ok(uid);
  var user = new @user.User(uid, {});

  return {
    getApp: function(id) {
      var app = @app.localAppState(user, id);
      return {
        tailLogs: app.tailLogs,
        isRunning: app.isRunning,
      }
    },
  }
};
