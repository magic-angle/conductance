@ = require('mho:std');
@bundle = require('sjs:bundle');
@crypto = require('nodejs:crypto');
@stream = require('sjs:nodejs/stream');
@response = require('mho:server/response');

var DIGEST_KEY='d';
var allHubs = ['sjs','mho','seed'];

var access = (function() {
  var dependencies = @bundle.findDependencies([ "seed:ui/main.sjs" ]);
  var cache = {};
  allHubs .. @each {|hub|
    var excludeHubs = allHubs .. @filter(h -> h !== hub) .. @map(h -> h+':');
    var content = @bundle.generateBundle(dependencies, {
      compile: true,
      exclude: excludeHubs,
    }) .. @join();

    var hash = @crypto.createHash('sha1');
    content
      .. @stream.pump(hash, {end:false});
    var digest = hash.digest('hex').slice(0, 20);

    cache[hub] = {
      content: content,
      digest: digest,
    };
  }
  return (hub) -> cache .. @get(hub);
})();


exports.urls = function(root) {
  return allHubs .. @map(hub -> @url.normalize("client.html.js?hub=#{hub}&#{DIGEST_KEY}=#{access(hub).digest}", root));
};

var daysInSeconds = 60 * 60 * 24;
var longExpiry = 90 * daysInSeconds;

exports.filter = function(req, block) {
  var params = req.url.params();
  var bundle = access(params .. @get('hub'));
  var {content, digest} = bundle;
  if(params[DIGEST_KEY]) {
    if(params[DIGEST_KEY] !== digest) {
      // does this ever happen?
      @info("digest mismatch: #{params[DIGEST_KEY]} != #{digest}");
      throw @response.NotFound();
    }
    // files served with a digest are valid forever
    req.response.setHeader("Cache-control", "public, max-age=#{longExpiry}");
  } else {
    @info("js bundle requested without a digest; redirecting");
    params[DIGEST_KEY] = digest;
    req .. @response.writeRedirectResponse(@url.normalize('?' + @url.buildQuery(params), req.url.source));
    return;
  }
  req.bundle = bundle;
  block();
};

exports.content = function(params) {
  return this .. @getPath('bundle.content');
};

exports.etag = function(params) {
  return access(params .. @get('hub')).digest;
};
