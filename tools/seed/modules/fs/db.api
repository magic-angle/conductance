@ = require(['mho:std', {id:'sjs:type',name:'type'}]);
var { @mkdirp } = require('sjs:nodejs/mkdirp');
var root = @path.join(@env.get('data-root'), 'app-db');
@common = require('seed:service/server/common');
@kv = require('mho:flux/kv');

var apiProto = require('./prototype');
exports.apiKeys = apiProto .. @ownKeys .. @filter(k -> !k .. @startsWith('_')) .. @toArray;

var instances = {};

exports.authenticate = function(token, block) {
	var [userId, appId] = @common.verify(token);
	var id = @path.join(userId, appId);
	if (instances .. @hasOwn(id)) {
		// duplicate db. This should only happen in the case of
		// an old lingering connection, so drop the previous DB
		(function(db) {
			@warn("destroying lingering DB for #{id}");
			delete instances[id];
			db.close();
		})(instances[id]);
	}

	var path = @path.join(root, userId, appId, 'db');
	@mkdirp(@path.dirname(path));
	@kv.LevelDB(path, {}) {|db|
		// just expose ITF_KVSTORE property, in case
		// LevelDB ever exposes non-kv methods
		instances[id] = db;
		try {
			var proxy = {};
			proxy[@kv.ITF_KVSTORE] = db[@kv.ITF_KVSTORE];
			block(proxy);
		} finally {
			if(instances[id] === db) {
				delete instances[id];
			}
		}
	}
}
