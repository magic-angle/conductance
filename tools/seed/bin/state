#!/usr/bin/env conductance
// vim: syntax=sjs
require('../modules/hub');
@ = require(['mho:std', 'seed:util']);
require('seed:env').defaults();
@etcd=require('seed:job/etcd');

var parser = require('sjs:dashdash').createParser({
	options: [
		{
			names: ['save'],
			type: 'string',
			helpArg: 'FILE',
			help: 'save current etcd state to FILE',
		},
		{
			names: ['restore'],
			type: 'string',
			helpArg: 'FILE',
			help: 'restore state from FILE',
		},
		{
			names: ['stop'],
			type: 'bool',
			helpArg: 'FILE',
			help: 'stop all running apps',
		},
		{
			names: ['dry-run','n'],
			type: 'bool',
			help: 'for --restore: just print what would be done',
		},
		{
			names: ['verbose', 'v'],
			type: 'bool',
			help: 'log more',
		},
		{
			names: ['help', 'h'],
			type: 'bool',
		},
	],
});

var opts = parser.parse();
function usage(msg, status) {
	console.log(opts);
	if (msg) {
		console.warn("Error: #{msg}\n");
	}
	console.warn("Usage: seed-state [OPTIONS]\n\noptions:\n");
	console.warn(parser.help({includeEnv:true}));
	process.exit(status == undefined ? 1 : status);
}


if (opts.help) usage(null, 0);
if (opts._args.length > 0) usage("too many args");
@logging.setLevel(opts.verbose ? @logging.VERBOSE : @logging.INFO);

var action = null;
;['save','restore','stop'] .. @each {|name|
	if (opts[name]) {
		@verbose("action: #{name}");
		if (action != null) usage("Multiple actions given");
		action = name;
	}
}

var etcd = @env.get('etcd');
function etcdItems(node) {
	return @Stream(function(emit) {
		var visit = function(node) {
			@verbose(`visiting node $node`);
			if (node.dir) {
				if(node.nodes) {
					node.nodes .. @each(visit);
				}
			} else {
				@verbose("Emitting", node.key, node.value);
				emit([node.key, node.value]);
			}
		}
		visit(node);
	});
}

var keyPrefix = @etcd.app_endpoint(null);
var { User } = require('seed:auth/user');
var { masterAppState } = require('seed:job/app');

var runningApps = (state) -> state .. etcdItems(state)
	.. @filter([k,v] -> k .. @startsWith(keyPrefix) && v)
	.. @transform(function([k,v]) {
		var parts = k .. @removeLeading(keyPrefix) .. @split('/');
		parts.length .. @assert.eq(2, `Wanted 2 parts, git $parts`);
		var [ uid, appid ] = parts;
		var user = new User(uid);
		return masterAppState(user, appid);
	});

var getCurrentState = -> etcd.get('/', {recursive:true}).node;
var ACTIONS = {
	save: function() {
		var contents = getCurrentState() .. JSON.stringify(null, 2);
		@fs.withWriteStream(opts.save, f -> contents .. @stream.pump(f));
		console.warn("Saved to #{opts.save}");
	},
	stop: function() {
		var state = getCurrentState();
		if(opts.dry_run) {
			@verbose("** state:\n", JSON.stringify(state, null, 2));
			state .. runningApps .. @each {|app|
				console.log(" - would stop app #{app}");
			}
		} else {
			state .. runningApps .. @each {|app|
				console.log("Stopping app #{app} ...");
				app.stop();
			}
		}
	},
	restore: function() {
		var state;
		@fs.withReadStream(opts.restore, f -> state = @stream.readAll(f, 'utf-8') .. JSON.parse());
		if(opts.dry_run) {
			@verbose("** state:\n", JSON.stringify(state, null, 2));
			state .. runningApps .. @each {|app|
				console.log(" - would start app #{app}");
			}
		} else {
			state .. runningApps .. @each {|app|
				console.log("Starting app #{app} ...");
				app.start();
			}
		}
	},
};

if(!action) usage("No action specified");
var fn = ACTIONS[action];
if(!fn) usage("Unknown action #{action}");
fn();
