#!/usr/bin/env conductance
// vim: syntax=sjs
@ = require('mho:std');
require('../modules/hub');
require('seed:env').defaults();

var parser = require('sjs:dashdash').createParser({
	options: [
		{
			names: ['pid', 'p'],
			type: 'number',
			help: 'affect single pid',
		},
		{
			names: ['user', 'u'],
			type: 'string',
			'default': process.env['LOGNAME'],
			help: 'affect processes run by `user` (default: current user)',
		},
		{
			names: ['help', 'h'],
			type: 'bool',
		},
	],
});

var opts = parser.parse();

if (opts.help) {
	console.log("Usage: seed-ctl [OPTIONS] KEY=val [...]\n\noptions:\n");
	console.log(parser.help({includeEnv:true}));
	process.exit(0);
}

// console.log(opts);
// @assert.ok(opts._args.length > 0, "Must provide at least one envvar");

var contents = opts._args .. @join("\n");
var environFile = @env.get('runtime-environ');

function run(cmd, args) {
	console.log("Running: #{cmd} #{args.join(" ")}");
	var child = @childProcess.run(cmd, args, {stdio:'inherit', throwing:false});
	if(child.code !== 0) {
		@error("command exited with status #{child.code}");
	}
};

// make sure we don't kill ourselves!
var sig = @env.get('ctl-signal');
process.on(sig, -> null);

console.log("Writing #{environFile}");
@path.join(environFile) .. @fs.writeFile(contents, {mode: 0666});

if (opts.pid) {
	run('kill', ['--signal', sig, String(opts.pid)]);
} else {
	// apply to all node processes
	var user = opts.user || process.env['LOGNAME'] .. @assert.ok();
	run('pkill', ['--signal', sig, '--exact', 'node', '-u', user]);
}
