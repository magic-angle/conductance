// Default conductance configuration

@ = require('mho:std');
require('./modules/hub');
var root = @url.normalize('./', module.id .. @url.toPath);

//----------------------------------------------------------------------
// function invoked by `conductance serve`
exports.serve = function(args) {
  var opts = args .. require('seed:env').parse([
      {
        name: 'self',
        type: 'bool',
        help: 'run an entire cluster locally (for development)',
      },
      {
        names: ['host'],
        type: 'string',
        help: 'serve on address (default: "localhost". Use "any" to serve on any address")',
        'default': 'localhost',
      },
      {
        names: ['port'],
        type: 'number',
        help: 'serve on port (default: 7075)',
        'default': 7075,
      },
    ]);

  @env.set('deployLoopback', opts.self);

  var routes = [
        @route.ExecutableDirectory('__mho/doc', @env.conductanceRoot + '/doc'),
        @route.SystemRoutes(),
        @route.CodeDirectory('modules', @path.join(root, 'modules')),
        @route.ExecutableDirectory(@path.join(root, 'modules/local')),
      ];

  if (process.env.NODE_ENV !== 'production') {
    // show stacktraces
    routes = routes .. @route.DeveloperMode();
  }

  var host = opts.host == 'any' ? null : opts.host;
  var port = opts.port;

  var address = @Port(port, host);
  waitfor {
    if (@env.get('deployLoopback')) {
      @logging.setLevel(@logging.INFO);
      require('./bin/etcd.sjs').withEtcd {||
        @info("etcd is running");

        @env.set('internalAddress', 'localhost');
        waitfor {
          @warn("Allowing anonymous access - only use this during development");
          require('./master.mho').serve(['--cors', '--anonymous']);
        } and {
          require('./proxy.mho').serve([]);
        } and {
          var slave = require('./slave.mho');
          var hostname = require('nodejs:os').hostname();
          waitfor {
            slave.serve(['--hostname', hostname + "_0", '--cors']);
          } or {
            // run a few extra slaves (re-using the one /api endpoint)
            [1, 2, 3] .. @each.par {|id|
              slave.run_slave(hostname + "_" + id);
            }
          }
        }
      }
    }
  } and {
    @server.run({
      address: address,
      routes: routes,
      debug: @debug,
    });
  }
};
