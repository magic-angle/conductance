// Default conductance configuration

@ = require('mho:std');
require('./modules/hub');
var root = @url.normalize('./', module.id .. @url.toPath);

//----------------------------------------------------------------------
// function invoked by `conductance serve`
exports.serve = function(args) {
  var common = require('./common.mho');
  var opts = args .. require('seed:env').parse([
      {
        name: 'self',
        type: 'bool',
        help: 'run an entire cluster locally (for development)',
      },
      {
        name: 'local',
        type: 'bool',
        help: 'use local UI, rather than current master',
      },
      {
        name: 'master',
        type: 'string',
        //XXX point this to production
        'default': 'http://localhost:7071',
        help: 'override master location (for testing)',
      },
      {
        names: ['host'],
        type: 'string',
        help: 'serve on address (default: "localhost". Use "any" to serve on any address")',
        'default': 'localhost',
      },
      {
        names: ['port'],
        type: 'number',
        help: 'serve on port (default: 7075)',
        'default': 7075,
      },
    ]);

  @env.set('deployLoopback', opts.self);
  @env.set('master-server', opts.local ? null : opts.master);

  var routes = [
    @route.ExecutableDirectory('__mho/doc', @env.conductanceRoot + '/doc'),
    @route.SystemRoutes(),
    @route.CodeDirectory('modules', @path.join(root, 'modules')),
    @route.ExecutableDirectory(@path.join(root, 'modules/local')),
  ] .. common.routeOptions();

  var host = opts.host == 'any' ? null : opts.host;
  var port = opts.port;

  var address = @Port(port, host);
  waitfor {
    if (@env.get('deployLoopback')) {
      @logging.setLevel(@logging.INFO);
      require('./bin/etcd.sjs').withEtcd {||
        @info("etcd is running");

        @env.set('internalAddress', 'localhost');
        if(!(opts.local || opts.master)) {
          @env.set('master-server', @env.get('publicAddress')('self', 'master'));
        }
        waitfor {
          @warn("Allowing anonymous access - only use this during development");
          require('./master.mho').serve([
            "--allow-origin=http://localhost.self:#{port}", // dnsmasq config
            "--allow-origin=http://localhost:#{port}", // basic config
            '--anonymous']);
        } and {
          require('./proxy.mho').serve([]);
        } and {
          var slave = require('./slave.mho');
          var hostname = require('nodejs:os').hostname();
          slave.serve_with_block(['--cors']) {|opts|
            [0, 1, 2, 3] .. @each.par {|id|
              slave.run_slave(hostname + "_" + id);
            }
          }
        }
      }
    }
  } and {
    @server.run({
      address: address,
      routes: routes,
      debug: @debug,
    });
  }
};
