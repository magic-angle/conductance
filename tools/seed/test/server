#!/usr/bin/env conductance
// vim: ft=sjs

require('./lib/env');
@ = require('mho:std');
var karmaConfUrl = @url.normalize('./conf/karma.js', module.id);
var karmaConf = require('nodejs:' + karmaConfUrl .. @url.toPath());
var { port:uiPort } = require('./conf/server.js');
var testDir = @url.normalize('./', module.id) .. @url.toPath();
@response = require('mho:server/response');

exports.serve = function() {
  var stubModule = require('./lib/stub.api');
  stubModule.hook {||
    var corsOrigins = ["http://localhost:#{uiPort}", "http://localhost:#{karmaConf.port}"];

    // used to skip tests which require docker
    @env.lazy('docker-enabled', -> @childProcess.run('which', ['docker'], {throwing: false}).code === 0);

    // need to hardcode the full server URL here because bridge likes to use root paths
    // (so localhost:#{karmaPort}/app/ won't work)
    @env.set('local-api-endpoint', "http://localhost:#{uiPort}/local/remote.api");

    // monkey-patch server.run to;
    // - add an /up endpoint
    // - serve /test routes
    // - allow CORS from karma server & main UI
    @server.run = function(orig) {
      return function(specs) {
        if (!Array.isArray(specs)) {
          specs = [specs];
        }
        specs = specs .. @map(function(spec) {
          spec = spec .. @clone();
          spec.routes = spec.routes.slice();
          spec.routes = [
            @Route('up', {GET: function(req) {
              req .. @response.setStatus(200);
              req.response.end();
            }}),

            @Route(/^stub\/([^\/]+)$/, {GET: function(req, [_,fn]) {
              var rv = stubModule[fn]();
              req .. @response.setStatus(200);
              req.response.end(String(rv || 'OK'));
            }}),

            @route.ExecutableDirectory('test', testDir),
          ].concat(spec.routes) .. @route.AllowCORS(h -> corsOrigins .. @hasElem(h.replace('127.0.0.1','localhost')));
          return spec;
        });
        return orig.apply(this, [specs].concat(arguments .. @slice(1) .. @toArray));
      };
    }(@server.run);

    console.warn("Serving test suite at http://localhost:#{uiPort}/test/");
    // modify default ports so as not to conflict with existing hosts
    var stubbedPorts = ['local', 'master','slave', 'http', 'https', 'proxy'];
    stubbedPorts .. @indexed .. @each {|[i, service]|
      @env.set("port-#{service}", uiPort+i);
    };

    var stubbedHosts = ['master', 'proxy', 'slave'];
    stubbedHosts .. @each {|service|
      @env.set("host-#{service}", 'localhost');
    }

    @env.set('publicAddress', function(orig) {
      // make sure all addresses we request are using test ports
      return function(service, proto) {
        if(service) stubbedHosts .. @assert.contains(service);
        if(proto) stubbedPorts .. @assert.contains(proto);
        return orig.apply(this, arguments);
      };
    }(@env.get('publicAddress')));

    require('../bin/services.sjs').withServices {|| // XXX should these specify a separate port too?
      waitfor {
        require('mho:server/seed/local').serve(['--port', String(@env.get('port-local')), '--master', "http://localhost:#{@env.get('port-master')}"]);
      } or {
        require('../config.mho').serve(['master','slave','proxy']);
      }
    }
  }
};

var isRunning = function(url) {
  try {
    @http.get(url);
    return true;
  } catch (e) {
    if(e.toString().indexOf('ECONNREFUSED') == -1) {
      // this is not the error we expected!
      throw(e);
    }
    return false;
  }
};

function serveAnd(block) {
  var url = "http://localhost:#{uiPort}/up";
  waitfor {
    if(isRunning(url)) hold();
    else exports.serve();
    throw new Error("Server ended");
  } or {
    while(true) {
      // XXX wait for other hosts too?
      if(isRunning(url)) break;
      hold(1000);
    }
    block();
  }
}

if (require.main === module) {
  var TRAVIS = process.env.TRAVIS === 'true';
  var args = require('sjs:sys').argv();

  var isPreArg = a -> /^(-v|--verbose|-q|--quiet)/.test(a);
  var [preArgs, args] = args .. @partition(isPreArg) .. @map(@toArray);
  require('mho:server/main').processGlobalOptions(preArgs);

  if(args[0] === 'app') {
    args.splice(0, 1, 'serve', module.id);
    exports.serve();
  } else {
    var runKarma = function() {
      @info("Running karma with args: ", args);
      require('nodejs:karma-sjs-adapter/karma.sjs').run(args);
    }
    args.splice(1,0, karmaConfUrl .. @url.toPath);
    if(args[0] === 'run') {
      args.splice(2, 0, '--', karmaConf.testScript);
      //console.log(args);
      runKarma();
    } else if(args[0] === 'start' || args[0] == 'single-run') {
      if (args[0] == 'single-run') {
        args[0] = 'start';
        args.splice(2, 0, '--single-run', '--', karmaConf.testScript);
      }
      // XXX this means only an app running in the _current process_ will work with karma
      @env.set('serverRoot', '/app/');
      var browsers = process.env.BROWSERS;
      if (browsers) {
        if (TRAVIS && browsers != 'PhantomJS') {
          process.env['DISPLAY'] = ':99';
          childProcess.run("sh", ["-e", "/etc/init.d/xvfb", "start"], {stdio: "inherit"});
          hold(3000);
        }
        args.splice(2, 0, '--browsers', browsers);
      }
      serveAnd {||
        runKarma();
        // XXX karma is fire-and-forget, we can't wait for its completion
        hold();
      }
    } else {
      console.warn("Usage: run.mho <action> [args ...]

ACTIONS:
  app           Run app server only (for manually running tests in a browser)
  start         Run app & karma server
  run           Run tests on the running karma server
  single-run    `start` & `run` in a single invocation");
      process.exit(1);
    }
  }
}
