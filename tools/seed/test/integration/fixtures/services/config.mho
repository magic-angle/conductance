@ = require('mho:std');
@kv = require('mho:flux/kv');
var fs = require('lib:seed/fs');
var db = require('lib:seed/db');

@logging.setLevel(@logging.VERBOSE);
exports.serve = function() {
  @server.run({
    address: @Port(7075),
    routes: [
      @Route('ping', {GET: function(req) {
        req .. @response.setStatus(200);
        req.response.end("pong!");
      }}),

      @Route('hosts', {GET: function(req) {
        req .. @response.setStatus(200);
        @fs.fileContents('/etc/hosts') .. @stream.pump(req.response);
      }}),

      @Route('dump-env', {GET: function(req) {
        req .. @response.setStatus(200);
        var instance = [key, v] -> v.instance != null ? [key, v.instance];
        @env._db .. @ownPropertyPairs
          .. @filter(instance)
          .. @map(instance)
          .. @pairsToObject()
          .. JSON.stringify()
          .. @stream.pump(req.response);
      }}),

      @Route(/^read\/(.*)$/, {POST: function(req, [_, path]) {
        path = decodeURIComponent(path);
        @info("reading #{path}");
        try {
          var contents = fs.readFile(path);
          req .. @response.setStatus(200);
          req.response.end(contents);
        } catch(e) {
          req .. @response.setStatus(500);
          req.response.end(JSON.stringify(e));
        }
      }}),

      @Route(/^write\/(.*)$/, {POST: function(req, [_, path]) {
        @info("writing #{path}");
        fs.writeFile(path, req.body() .. @join);
        req .. @response.setStatus(200);
        req.response.end(path);
      }}),

      @Route(/^ls\/(.*)$/, {POST: function(req, [_, path]) {
        @info("listing #{path}");
        var contents = fs.readdir(path);
        req .. @response.setStatus(200);
        req.response.end(contents .. JSON.stringify());
      }}),

      @Route(/^kv\/get\/(.*)$/, {POST: function(req, [_,key]) {
        db.withDB {|db|
          var contents = db .. @kv.get(key);
          req .. @response.setStatus(200);
          // XXX this sucks
          if(contents === undefined) contents = null;
          req.response.end(contents .. JSON.stringify());
        }
      }}),

      @Route(/^kv\/set\/(.*)$/, {POST: function(req, [_,key]) {
        var payload = req.body('utf-8') .. @join;
        try {
          payload = payload .. JSON.parse();
        } catch(e) {
          req .. @response.setStatus(500);
          req.response.end("bad JSON: #{payload}");
        }
        db.withDB {|db|
          db .. @kv.set(key, payload);
          req .. @response.setStatus(200);
          req.response.end('ok');
        }
      }}),

      @Route(/^rm$/, {POST: function(req) {
        @info("turfing #{path}");
        // TODO
        //req .. @response.setStatus(200);
        //req.response.end(contents);
      }}),
    ],
  });
};
