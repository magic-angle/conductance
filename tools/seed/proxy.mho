require('./modules/hub');
@ = require(['mho:std', 'seed:util']);
@os = require('nodejs:os');
@etcd = require('seed:job/etcd');
@stream = require('sjs:nodejs/stream');

exports.serve = function(args) {
	var opts = args .. require('seed:env').parse([]);

	var proxies = {};

	var nodeHttp = require('nodejs:http');
	var proxyAgent = new nodeHttp.Agent();
	proxyAgent.maxSockets = 2048;

	var hostSuffix = '.' + @env.get('host-self');
	var getSubdomain = function(req) {
		return req.url.host .. @removeTrailing(hostSuffix);
	};
	if (@env.get('production') === false) {
		getSubdomain = function(orig) {
			return function(req) {
				// add hack for localhost, so we don't have to set up dnsmasq for testing
				if (req.url.host === 'localhost') {
					var [_, leading, trailing] = req.url.path .. @split('/', 3);
					req.url.path = '/' + trailing;
					return leading;
				}
				return orig.apply(this, arguments);
			};
		}(getSubdomain);
	};

	var proxyRoute = function(proto, publicPort) {
		publicPort = String(publicPort);
		return @Route(/^/, {'*': function(req) {
			//console.log(req);
			var destRoute = proxies[publicPort];
			//console.log(JSON.stringify(proxies));
			@debug("destRoute[#{publicPort}]: ", destRoute);
			if (destRoute) {
				var subdomain = getSubdomain(req);
				@debug("proxying subdomain: #{subdomain}");
				destRoute = destRoute[subdomain];
				//@info("destRoute: ", destRoute);
				if (destRoute) {
					var [destHost, destPort] = destRoute;
					var dest = "#{proto}://#{destHost}:#{destPort}#{req.url.path}";
					if (req.url.query) dest += "?#{req.url.query}";
					var opts = {
						method: req.request.method,
						response: 'raw',
						body: req.body,
						agent: proxyAgent,
						throwing: false,
					};
					//@info("PROXY -> #{dest}");
					var response = @http.request(dest, opts);
					//@info(response.statusCode);

					req.response.writeHead(response.statusCode, response.headers);
					response .. @stream.pump(req.response);
					req.response.end();
					return;
				}
			}
			throw @NotFound();
		}});
	};

	waitfor {
		@server.run([
			{
				address: opts.Port(@env.get('port-proxy-http')),
				routes: [proxyRoute('http', 8080)],
			},
			{
				address: opts.Port(@env.get('port-proxy-https')),
				routes: [proxyRoute('https', 4043)],
			},
		]);
	} or {
		var keyPrefix = @etcd.app_port_mappings(null);

		var handle = function(change) {
			//@info("CHANGE:", change);
			var action = change.action || 'set';
			if (change.node === null) return;
			node = change.node || change;
			var getKey = function() {
				var key = node.key .. @removeLeading(keyPrefix) .. @split('/');
				@assert.ok(key.length == 2);
				return key .. @reverse() .. @join('.');
			};

			switch(action) {
				case 'get':
				case 'set':
					// initial "node" is actually a bunch of nodes, so recursively handle those:
					if (node .. @hasOwn('nodes')) {
						node.nodes .. @each(handle);
						return;
					}
					if (node.dir) return;
					var mappings = node.value .. @split(',');
					var host = mappings.shift();
					var key = getKey();
					mappings = mappings .. @each {|mapping|
						var [pub, internal] = mapping.split(':');
						@info("will proxy port #{pub} to port #{internal} on host #{host}");
						if (!proxies .. @hasOwn(pub)) {
							proxies[pub] = {};
						}
						proxies[pub][key] = [host, internal];
					}
					break;
				
				case "delete":
				case "compareAndDelete":
					var key = getKey();
					@info("Deleting routes for #{key}");
					proxies .. @ownValues .. @each {|apps|
						delete apps[key];
					}
					break;

				default:
					@info("ignoring proxy change type #{action}");
			}
		};

		@env.get('etcd') .. @etcd.changes(keyPrefix, {recursive:true, initial:true}) .. @each(handle);
	}
}
